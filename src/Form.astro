---
interface Field {
	title?: string;
	action?: string;
	fields?: object[];
	buttons?: object[];
	process?: object[];
}

interface Props {
	form: Field[];
	className?: string; // Classes to add to <section> element
	provider?: string;
	honeypot?: boolean;
	horizontal?: boolean;
}

const { provider, class: className = "", honeypot = false, horizontal = false, form = {} } = Astro.props as Props;

let netlify = false;
if (provider && provider == "netlify") {
	netlify = true;
}
---

<form name="contact" method="POST" class={`${className} ${horizontal ? "horizontal" : ""}`.trim()} netlify-honeypot={honeypot && netlify ? "bot-field" : false} data-netlify={netlify}>

	<!-- Honeypot definition -->
	{netlify && (
		<>
		<input type="hidden" name="form-name" value="contact" />
		{honeypot && (
			<p class="honeypot">
				<label>
					Donâ€™t fill this out if you're human:
					<input name="bot-field" />
				</label>
			</p>
		)}
		</>
	)}

	<!-- Fields -->
	{form && form.fields && (
		<>
		<fieldset>
		<legend>{form.title}</legend>
		{form.fields.map(field => (
			<>
			<label for={field.name}>
				<span>{field.label}</span>
				{field.type == "text" ? (
					<input type="text" id={field.name} placeholder={field.placeholder} name={field.name} required={field.required} disabled={field.disabled}/>
				) : field.type == "email" ? (
					<input type="email" id={field.name} placeholder={field.placeholder} name={field.name} required={field.required} disabled={field.disabled}/>
				) : field.type == "textarea" ? (
					<textarea id={field.name} placeholder={field.placeholder} name={field.name} required={field.required} disabled={field.disabled}></textarea>
				) : field.type == "select" ? (
					<>
					<select id={field.name} name={field.name} required={field.required} disabled={field.disabled} multiple={field.multiple}>
						<!--{field.options.map(option => (
							<option value={option.value}>{option.label}</option>
						))}-->
					</select>
					</>
				) : field.type == "radio" ? (
					<>
					<div>
					{field.options.map(option => (
						<input type="radio" name={field.name} value={option.value} required={field.required} disabled={field.disabled} />
						<span>{option}</span>
					))}
					</div>
					</>
				) : field.type == "checkbox" ? (
					<>
					<div>
					{field.options.map(option => (
						<input type="checkbox" name={field.name} value={option.value} required={field.required} disabled={field.disabled} />
						<span>{option}</span>
					))}
					</div>
					</>
				) : field.type == "file" ? (
					<input type="file" id={field.name} name={field.name} required={field.required} disabled={field.disabled} />
				) : field.type == "date" ? (
					<input type="date" id={field.name} name={field.name} required={field.required} disabled={field.disabled} />
				) : field.type == "time" ? (
					<input type="time" id={field.name} name={field.name} required={field.required} disabled={field.disabled} />
				) : field.type == "datetime-local" ? (
					<input type="datetime-local"  id={field.name} name={field.name} required={field.required} disabled={field.disabled} />
				) : (
					<input type="text" id={field.name} placeholder={field.placeholder} name={field.action} required={field.required} />
				)}
			</label>
			</>
		))}
		{form.buttons.map(button => (
			<>
			<button type={button.type} disabled={button.disabled}>{button.title}</button>
			</>
		))}
		</fieldset>
		</>
	)}
</form>

<style lang="scss">
	form {
		&.horizontal {
			fieldset {
				display: flex;
				flex-direction: row;
				align-items: flex-end;
				gap: 0.5rem;
			}
		}

		fieldset {
			width: 100%;
			display: flex;
			flex-direction: column;
    		align-items: flex-start;
			gap: 0.2rem;

			> label {
				display: flex;
				flex-direction: column;
				flex-grow: 1;
			}
		}
		.honeypot {
			display: none;
		}
	}
</style>
